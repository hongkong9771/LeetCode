# -*- coding:utf-8 -*- 
# @Time : 2022/4/18 19:52
# @Author : 危红康
# @File : 计算整数n二进制中1的个数.py
# @Software: PyCharm


"""
题目1.给定整数n，求n的二进制中1的个数？
题目2.给定整数n，求1~n中二进制中的个数之和？

"""


def count1(n):
    # 题目1.给定整数n，求n的二进制中1的个数？

    # 方法一：移位计数法，时间复杂度与n的位数有关
    # cnt = 0
    # while n > 0:
    #     if n & 1 == 1:
    #         cnt += 1
    #     n >>= 1
    # return cnt

    # 方法二：清位法，与整数n中1的个数有关
    # cnt = 0
    # while n > 0:
    #     n &= (n-1)  # n与n-1相与，可以去除掉n右侧的1
    #     cnt += 1
    # return cnt

    # 方法三：递归法
    """
    1) 当n为偶数时，n中1的个数与n/2中1的个数相同，因为直接由n/2向左移一位
    2) 当n为奇数时，n中1的个数为(n-1)/2中1的个数+1，因为n-1直接由(n-1)/2向
    左移位得来，然后再在末尾+1
    """
    # if n == 1:
    #     return 1
    # if n % 2 == 0:
    #     cnt = count1(n/2)
    # else:
    #     cnt = count1(n//2) + 1
    # return cnt

    # 方法四：查表法
    """
    由上面方法三中的递归法可以推出以下结论：
    不同整数二进制下1的个数
    整数：0  1  2  3  4  5  6  7  8  9  10 11 12 13 14 15
    个数：0  1  1  2  1  2  2  3  1  2  2  3  2  3  3  4
    整数：16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31
    个数：1  2  2  3  2  3  3  4  2  3  3  4  3  4  4  5
    整数：32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47
    个数：2  3  3  4  3  4  4  5  3  4  4  5  4  5  5  6
    依据上述结论构造数组nums = [0, 1, 1, 2, 1, 2, 2, 3, 1, 2, 2, 3, 2, 3, 3, 4]
    观察可以发现对于整数n，其对16进行整除假设除数为i，余数为j，则n的二进制中1的个数为 i + nums[j]
    """
    nums = [0, 1, 1, 2, 1, 2, 2, 3, 1, 2, 2, 3, 2, 3, 3, 4]
    i, j = n // 16, n % 16
    cnt = i + nums[j]
    return cnt


n = 7
res = count1(n)
print(res)


def count2(n):
    # 题目2.给定整数n，求1~n中二进制中的个数之和？
    """
    调用上面的函数可以求出每个整数n的二进制中1的个数，要求1~n中二进制1的个数的总和，则只需遍历即可。这种方法下面就不做介绍了。

    由上面方法四中的结论可以计算出1~n中二进制中的个数之和，找规律即可。
    假设第一行之和为Sum，则第二行之和为Sum+16*1，第三行之和为Sum+16*2...以此类推
    整数n且只到整数n位置所在行之和为sum(nums[:j+1])+i*(j+1)
    """
    nums = [0, 1, 1, 2, 1, 2, 2, 3, 1, 2, 2, 3, 2, 3, 3, 4]
    i, j = n // 16, n % 16
    Sum = sum(nums)
    cnt = Sum * i + 16 * i * (i-1) // 2 + sum(nums[:j+1]) + i * (j + 1)
    return cnt


n = 7
res = count2(n)
print(res)